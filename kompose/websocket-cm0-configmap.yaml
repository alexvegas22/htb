apiVersion: v1
data:
  .env: ""
  index.js: "import { WebSocketServer } from 'ws';\nimport dotenv from 'dotenv';\ndotenv.config();\nconst wsPort = process.env.WEBSOCKET_PORT;\nconst wss = new WebSocketServer({ port: wsPort });\n\nlet messageId = 1; \nconst messages = [];\nconst rooms = new Map();\nconst clients = new Map();\n\nwss.on('connection', function connection(ws, client) {\n    ws.on('error', console.error);\n\n  // Send the existing messages array to the new connection\n    ws.send(JSON.stringify({ messages: messages.map(msg => ({ event: msg.event, username: msg.username, text: msg.text , room: msg.room})) }));\n\n    ws.on('open', function open() {\n\t\n    });\n    \n    ws.on('message', function message(data) {\n\t\n\tconst parsedData = JSON.parse(data);\n\tconst { event, username, text, room } = parsedData;\n\tif (event=='set-name'){\n\t    const metadata = {username, room}\n\t    clients.set(ws, metadata);\n\t}\n\tif ( event=='command'){\n\t    ws.send(JSON.stringify({event:event,username:username,text:text,room:room}))\n\t    const commandArray = text.split(' ');\n\t    switch  (commandArray[0]){\n\t    case '/help' :\n\t\tconst helpMessage = [\n\t\t    \"-> Available commands:\",\n\t\t    \"/msg [username] [message] : send a private message to a user\",\n\t\t    \"/users : list all active users in the room\",\n\t\t    \"/leave : leave the room\"]\n\t\thelpMessage.forEach(help=>\n\t\t    ws.send(JSON.stringify({event:'output',username:username,text:help,room:room})));\n\t\tbreak;\n\t    case '/msg' :\n\t\tif (commandArray[1]){\n\t\t    const client = Array.from(clients.entries())\n\t\t\t  .filter(([client, metadata]) => metadata.username === commandArray[1])\n\t\t\t  .map(([client]) => client);\n\t\t    if (client[0]){\n\t\t\tif(commandArray[2]){\n\t\t\t    const filteredMessage = commandArray.splice(2).join(' ');\n\t\t\t    client[0].send(JSON.stringify({event: 'private', username: username, text: filteredMessage, room: room}));\n\t\t\t} else {\n\t\t\t    ws.send(JSON.stringify({event:'output',username:username,text:'No message has been provided',room:room}));\n\t\t\t}\n\t\t    } else {\n\t\t\tws.send(JSON.stringify({event:'output',username:username,text:`User ${commandArray[1]} does not exist`,room:room}));\n\t\t    }\n\t\t}else {\n\t\t    ws.send(JSON.stringify({event:'output',username:username,text:'No username has been provided',room:room}));\n\t        }\n\t        break;\n\t    case '/users' :\n\t\tws.send(JSON.stringify({ event: 'output', text: 'Users :', room: room }));\n\t\tconst clientsInRoom = Array.from(clients.entries())\n\t\t      .filter(([client, metadata]) => metadata.room === room)\n\t\t      .map(([client, metadata]) => {\n\t\t\t  ws.send(JSON.stringify({ event: 'output', username:'server', text: metadata.username, room: room }));\t\n\t\t      });\n\t\tbreak;\n\t    default :\n\t\tws.send(JSON.stringify({ event: 'output', username:'server', text:`'${commandArray[0]}' is not a valid command`, room: room }));\n\t    }\n\t}\n\telse{\n\t    messages.push({ event, username, text, room});\n\t    broadcast({event, username, text, room});\n\t}\n\tconsole.log(`Received message ${data} from user ${username}`);\n\t\n    });\n    \n    ws.on('close', () => {\n\tconst clientMetadata = clients.get(ws);\n\tconst username = clientMetadata ? clientMetadata.username : 'Unknown';\n\t\n\tbroadcast({event : 'leave', username: username, room: clientMetadata.room});\n\tclients.delete(ws);\n    });\n});\n\n\nfunction broadcast(message) {\n    const clientsInRoom = Array.from(clients.entries())\n        .filter(([client, metadata]) => metadata.room === message.room)\n        .map(([client]) => client);\n    for (const client of clientsInRoom) {\n        client.send(JSON.stringify(message));\n    }\n}\n\n"
  package-lock.json: |
    {
      "name": "websocket",
      "version": "1.0.0",
      "lockfileVersion": 3,
      "requires": true,
      "packages": {
        "": {
          "name": "websocket",
          "version": "1.0.0",
          "license": "ISC",
          "dependencies": {
            "dotenv": "^16.4.5",
            "ws": "^8.16.0"
          }
        },
        "node_modules/dotenv": {
          "version": "16.4.5",
          "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.5.tgz",
          "integrity": "sha512-ZmdL2rui+eB2YwhsWzjInR8LldtZHGDoQ1ugH85ppHKwpUHL7j7rN0Ti9NCnGiQbhaZ11FpR+7ao1dNsmduNUg==",
          "engines": {
            "node": ">=12"
          },
          "funding": {
            "url": "https://dotenvx.com"
          }
        },
        "node_modules/ws": {
          "version": "8.16.0",
          "resolved": "https://registry.npmjs.org/ws/-/ws-8.16.0.tgz",
          "integrity": "sha512-HS0c//TP7Ina87TfiPUz1rQzMhHrl/SG2guqRcTOIUYD2q8uhUdNHZYJUaQ8aTGPzCh+c6oawMKW35nFl1dxyQ==",
          "engines": {
            "node": ">=10.0.0"
          },
          "peerDependencies": {
            "bufferutil": "^4.0.1",
            "utf-8-validate": ">=5.0.2"
          },
          "peerDependenciesMeta": {
            "bufferutil": {
              "optional": true
            },
            "utf-8-validate": {
              "optional": true
            }
          }
        }
      }
    }
  package.json: |
    {
      "name": "websocket",
      "version": "1.0.0",
      "description": "websocket for htb",
      "main": "index.js",
      "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1"
      },
      "author": "",
      "license": "ISC",
      "type": "module",
      "dependencies": {
        "dotenv": "^16.4.5",
        "ws": "^8.16.0"
      }
    }
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: websocket
  name: websocket-cm0
